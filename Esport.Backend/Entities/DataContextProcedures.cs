// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Esport.Backend.Entities;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace Esport.Backend.Entities
{
    public partial class DataContext
    {
        private IDataContextProcedures _procedures;

        public virtual IDataContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new DataContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IDataContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class DataContextProcedures : IDataContextProcedures
    {
        private readonly DataContext _context;

        public DataContextProcedures(DataContext context)
        {
            _context = context;
        }

        public virtual async Task<int> NLogAddEntryAsync(string machineName, DateTime? logged, string level, string message, string logger, string properties, string exception, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "machineName",
                    Size = 400,
                    Value = machineName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "logged",
                    Value = logged ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "level",
                    Size = 5,
                    Value = level ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "message",
                    Size = -1,
                    Value = message ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "logger",
                    Size = 600,
                    Value = logger ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "properties",
                    Size = -1,
                    Value = properties ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "exception",
                    Size = -1,
                    Value = exception ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [log].[NLogAddEntry] @machineName = @machineName, @logged = @logged, @level = @level, @message = @message, @logger = @logger, @properties = @properties, @exception = @exception", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
