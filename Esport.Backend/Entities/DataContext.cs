// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Esport.Backend.Entities;

public partial class DataContext : DbContext
{
    public DataContext(DbContextOptions<DataContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AuthRole> AuthRoles { get; set; }

    public virtual DbSet<AuthUser> AuthUsers { get; set; }

    public virtual DbSet<Contact> Contacts { get; set; }

    public virtual DbSet<Event> Events { get; set; }

    public virtual DbSet<EventsUser> EventsUsers { get; set; }

    public virtual DbSet<File> Files { get; set; }

    public virtual DbSet<Gallery> Galleries { get; set; }

    public virtual DbSet<Game> Games { get; set; }

    public virtual DbSet<GameServer> GameServers { get; set; }

    public virtual DbSet<News> News { get; set; }

    public virtual DbSet<Nlog> Nlogs { get; set; }

    public virtual DbSet<SchemaVersion> SchemaVersions { get; set; }

    public virtual DbSet<Tag> Tags { get; set; }

    public virtual DbSet<Team> Teams { get; set; }

    public virtual DbSet<UsersGame> UsersGames { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("Latin1_General_100_CS_AS_SC");

        modelBuilder.Entity<AuthRole>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_UserRoles");

            entity.ToTable("AuthRoles", "auth");
        });

        modelBuilder.Entity<AuthUser>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Users");

            entity.ToTable("AuthUsers", "auth");

            entity.Property(e => e.AddressCity).HasMaxLength(50);
            entity.Property(e => e.AddressFloor).HasMaxLength(50);
            entity.Property(e => e.AddressPostalCode).HasMaxLength(10);
            entity.Property(e => e.AddressSide).HasMaxLength(50);
            entity.Property(e => e.AddressStreet).HasMaxLength(255);
            entity.Property(e => e.CanBringLaptop).HasAnnotation("Relational:DefaultConstraintName", "DF_Users_CanBringLaptop");
            entity.Property(e => e.CanBringPlaystation).HasAnnotation("Relational:DefaultConstraintName", "DF_Users_CanBringPlaystation");
            entity.Property(e => e.CanBringStationaryPc).HasAnnotation("Relational:DefaultConstraintName", "DF_Users_CanBringStationaryPc");
            entity.Property(e => e.ConsentShowImages).HasAnnotation("Relational:DefaultConstraintName", "DF_Users_ConsentShowImages");
            entity.Property(e => e.FirstName).HasMaxLength(255);
            entity.Property(e => e.IsActivated).HasAnnotation("Relational:DefaultConstraintName", "DF_AuthUsers_IsActivated");
            entity.Property(e => e.LastName).HasMaxLength(255);
            entity.Property(e => e.Mobile).HasMaxLength(50);
            entity.Property(e => e.PasswordHash).IsRequired();
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.Image).WithMany(p => p.AuthUsers)
                .HasForeignKey(d => d.ImageId)
                .HasConstraintName("FK_AuthUsers_Files");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .HasConstraintName("FK_Users_Parent");

            entity.HasMany(d => d.Roles).WithMany(p => p.Users)
                .UsingEntity<Dictionary<string, object>>(
                    "AuthUsersRole",
                    r => r.HasOne<AuthRole>().WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_UsersRoles_UserRoles"),
                    l => l.HasOne<AuthUser>().WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_UsersRoles_Users"),
                    j =>
                    {
                        j.HasKey("UserId", "RoleId").HasName("PK_UsersRoles");
                        j.ToTable("AuthUsersRoles", "auth");
                    });
        });

        modelBuilder.Entity<Contact>(entity =>
        {
            entity.ToTable("Contacts", "cms");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Body).IsRequired();
            entity.Property(e => e.ContactFrom)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.ContactMobile).HasMaxLength(50);
            entity.Property(e => e.ContactName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Subject)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<Event>(entity =>
        {
            entity.ToTable("Events", "club");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.EndDateTime).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.StartDateTime).HasColumnType("datetime");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.Events)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Events_Users");

            entity.HasMany(d => d.Teams).WithMany(p => p.Events)
                .UsingEntity<Dictionary<string, object>>(
                    "EventsTeam",
                    r => r.HasOne<Team>().WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_EventsTeams_Teams"),
                    l => l.HasOne<Event>().WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_EventsTeams_Events"),
                    j =>
                    {
                        j.HasKey("EventId", "TeamId");
                        j.ToTable("EventsTeams", "club");
                    });
        });

        modelBuilder.Entity<EventsUser>(entity =>
        {
            entity.HasKey(e => new { e.EventId, e.UserId });

            entity.ToTable("EventsUsers", "club");

            entity.Property(e => e.Accepted).HasColumnType("datetime");
            entity.Property(e => e.Declined).HasColumnType("datetime");
            entity.Property(e => e.Invited).HasColumnType("datetime");

            entity.HasOne(d => d.Event).WithMany(p => p.EventsUsers)
                .HasForeignKey(d => d.EventId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EventsUsers_Events");

            entity.HasOne(d => d.User).WithMany(p => p.EventsUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EventsUsers_Users");
        });

        modelBuilder.Entity<File>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_File");

            entity.ToTable("Files", "cms");

            entity.Property(e => e.Filename)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Title).HasMaxLength(255);
        });

        modelBuilder.Entity<Gallery>(entity =>
        {
            entity.ToTable("Galleries", "cms");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasMany(d => d.Images).WithMany(p => p.Galleries)
                .UsingEntity<Dictionary<string, object>>(
                    "GalleriesImage",
                    r => r.HasOne<File>().WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_GalleriesImages_Files"),
                    l => l.HasOne<Gallery>().WithMany()
                        .HasForeignKey("GalleryId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_GalleriesImages_Galleries"),
                    j =>
                    {
                        j.HasKey("GalleryId", "ImageId");
                        j.ToTable("GalleriesImages", "cms");
                    });
        });

        modelBuilder.Entity<Game>(entity =>
        {
            entity.ToTable("Games", "club");

            entity.Property(e => e.Logo).HasMaxLength(255);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<GameServer>(entity =>
        {
            entity.ToTable("GameServers", "club");

            entity.Property(e => e.Server)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.Game).WithMany(p => p.GameServers)
                .HasForeignKey(d => d.GameId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GameServers_Games");
        });

        modelBuilder.Entity<News>(entity =>
        {
            entity.ToTable("News", "cms");

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.IsPublished).HasAnnotation("Relational:DefaultConstraintName", "DF_News_IsPublished");
            entity.Property(e => e.MetaDescription).HasMaxLength(160);
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            entity.Property(e => e.UrlSlug)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.NewsCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_News_Users");

            entity.HasOne(d => d.Image).WithMany(p => p.News)
                .HasForeignKey(d => d.ImageId)
                .HasConstraintName("FK_News_Files");

            entity.HasOne(d => d.UpdatedByNavigation).WithMany(p => p.NewsUpdatedByNavigations)
                .HasForeignKey(d => d.UpdatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_News_Users1");

            entity.HasMany(d => d.Tags).WithMany(p => p.News)
                .UsingEntity<Dictionary<string, object>>(
                    "NewsTag",
                    r => r.HasOne<Tag>().WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_NewsTags_Tags"),
                    l => l.HasOne<News>().WithMany()
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_NewsTags_News"),
                    j =>
                    {
                        j.HasKey("NewsId", "TagId");
                        j.ToTable("NewsTags", "cms");
                    });
        });

        modelBuilder.Entity<Nlog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Log");

            entity.ToTable("NLog", "log");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Level)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Logged).HasColumnType("datetime");
            entity.Property(e => e.Logger).HasMaxLength(300);
            entity.Property(e => e.MachineName).HasMaxLength(200);
            entity.Property(e => e.Message).IsRequired();
        });

        modelBuilder.Entity<SchemaVersion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_SchemaVersions_Id");

            entity.Property(e => e.Applied).HasColumnType("datetime");
            entity.Property(e => e.ScriptName)
                .IsRequired()
                .HasMaxLength(255)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<Tag>(entity =>
        {
            entity.ToTable("Tags", "cms");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<Team>(entity =>
        {
            entity.ToTable("Teams", "club");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
            entity.Property(e => e.ValidTo).HasColumnType("datetime");

            entity.HasMany(d => d.Members).WithMany(p => p.Teams)
                .UsingEntity<Dictionary<string, object>>(
                    "UsersTeam",
                    r => r.HasOne<AuthUser>().WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_UsersTeams_Users"),
                    l => l.HasOne<Team>().WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_UsersTeams_Teams"),
                    j =>
                    {
                        j.HasKey("TeamId", "MemberId");
                        j.ToTable("UsersTeams", "club");
                    });
        });

        modelBuilder.Entity<UsersGame>(entity =>
        {
            entity.HasKey(e => new { e.GameId, e.UserId });

            entity.ToTable("UsersGames", "club");

            entity.Property(e => e.InGameName)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.Game).WithMany(p => p.UsersGames)
                .HasForeignKey(d => d.GameId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UsersGames_Games");

            entity.HasOne(d => d.User).WithMany(p => p.UsersGames)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UsersGames_Users");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}